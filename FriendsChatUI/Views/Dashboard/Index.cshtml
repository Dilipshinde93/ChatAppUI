@model List<PostDto>

@{
    ViewData["Title"] = "Dashboard";
    var jwtToken = Context.Session.GetString("JwtToken") ?? "";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>FriendsChat Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <div class="container mt-4">

        <div class="dashboard-actions">
            <div class="card">
                <h5>📨 Feed</h5>
                <button class="btn btn-primary btn-sm" id="loadFeedBtn">Current</button>
            </div>
            <div class="card position-relative">
                <h5>👥 Friends</h5>
                <button class="btn btn-success btn-sm" id="loadFriendsBtn">Friends</button>
                @if ((int?)ViewBag.PendingRequestCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @ViewBag.PendingRequestCount
                    </span>
                }
            </div>
            <div class="card position-relative">
                <h5>🔔 Notifications</h5>
                <a href="/Notification/Index" class="btn btn-warning btn-sm" id="notifyBtn">Notify</a>
                <span id="notificationCountBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display:none;">
                    0
                </span>
            </div>
            <div class="card">
                <h5>💬 Messages</h5>
                <a href="/Messages/Index" class="btn btn-info btn-sm">Chat</a>
            </div>
            <div class="card">
                <h5>📹 Videos</h5>
                <a href="/Videos/Index" class="btn btn-dark btn-sm">Videos</a>
            </div>
        </div>

        <!-- 🔔 Notifications Panel -->
        <div id="notificationsPanel" class="mb-4"></div>

        <div id="mainContent">
            <div id="friendsList"></div>
            <div id="feedContent">
                <h4 class="mb-3">📢 Post Something</h4>
                <form asp-controller="Feed" asp-action="Create" method="post" enctype="multipart/form-data" class="mb-4">
                    <textarea name="content" class="form-control mb-2" placeholder="What's on your mind?" rows="3"></textarea>
                    <input type="file" name="image" class="form-control mb-2" />
                    <button type="submit" class="btn btn-primary">Post</button>
                </form>

                <h4 class="mb-3">📰 Recent Posts</h4>
                @if (Model != null)
                {
                    foreach (var post in Model)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-body">
                                <p class="mb-1">@post.Content</p>
                                @if (!string.IsNullOrEmpty(post.ImageUrl))
                                {
                                    <img src="@Url.Content(post.ImageUrl)" class="img-fluid rounded mb-2" style="max-height: 300px;" />
                                }
                                <div class="d-flex align-items-center gap-3 mt-2 mb-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary like-btn" data-post-id="@post.Id">👍 Like</button>
                                    <span class="text-muted">@((post.Likes?.Count ?? 0) + " Likes")</span>
                                    @if (post.Comments?.Any() == true)
                                    {
                                        <button class="btn btn-sm btn-outline-secondary toggle-comments" data-post-id="@post.Id">
                                            💬 View Comments (@(post.Comments.Count))
                                        </button>
                                    }
                                </div>
                                <form class="comment-form d-flex mb-2" data-post-id="@post.Id">
                                    <input type="text" name="text" class="form-control form-control-sm me-2" placeholder="Write a comment..." />
                                    <button type="submit" class="btn btn-sm btn-secondary">💬</button>
                                </form>
                                @if (post.Comments?.Any() == true)
                                {
                                    <div class="bg-light p-2 rounded small comments-section" id="comments-@post.Id" style="display: none;">
                                        <strong>Comments:</strong>
                                        <ul class="list-unstyled mb-0">
                                            @foreach (var comment in post.Comments)
                                            {
                                                <li class="border-bottom py-1">
                                                    @comment.Text
                                                    <small class="text-muted">(@comment.Timestamp.ToLocalTime())</small>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                                <small class="text-muted d-block mt-2">@post.Timestamp.ToLocalTime()</small>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    @section Scripts {
    <script>
        const jwtToken = "@jwtToken";
        const userId = "@Context.Session.GetString("UserId")";

        $(document).ready(function () {
            $("#loadFriendsBtn").on("click", function () {
                fetch('/Friends/LoadFriendsWithSuggestionsPartial')
                    .then(res => res.text())
                    .then(html => {
                        $("#friendsList").html(html).show();
                    });
            });
            
            const feedConnection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:44350/PostHub", {
                    accessTokenFactory: () => jwtToken,
                        withCredentials: true
                }).build();

            feedConnection.start().catch(err => console.error("❌ FeedHub error:", err));

            // Like button
            $(document).on("click", ".like-btn", function () {
                const postId = $(this).data("post-id");
                feedConnection.invoke("LikePost", postId, userId).catch(console.error);
            });

            // Comment form
            $(document).on("submit", ".comment-form", function (e) {
                e.preventDefault();
                const postId = $(this).data("post-id");
                const commentText = $(this).find("input[name='text']").val();
                feedConnection.invoke("AddComment", postId, userId, commentText).catch(console.error);
                $(this).find("input[name='text']").val("");
            });

            // Real-time like update
            feedConnection.on("PostLiked", function (postId, likeCount) {
                const span = $(`[data-post-id='${postId}']`).siblings("span.text-muted");
                span.text(`${likeCount} Likes`);
            });

            // Real-time comment update
            feedConnection.on("CommentAdded", function (data) {
                const commentList = $(`#comments-${data.postId} ul`);
                commentList.append(`
                    <li class="border-bottom py-1">
                        ${data.text}
                        <small class="text-muted">(${new Date(data.timestamp).toLocaleString()})</small>
                    </li>
                `);
            });

            const notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:44350/NotificationsHub", {
                    accessTokenFactory: () => jwtToken,
                    withCredentials: true
                }).build();

            notificationConnection.on("ReceiveNotification", function () {
                incrementNotificationCount();
            });

            notificationConnection.start()
                .then(() => notificationConnection.invoke("GetUnreadCount"))
                .then(count => {
                    if (count > 0) {
                        $('#notificationCountBadge').text(count).show();
                    }
                })
                .catch(err => console.error("SignalR notification error:", err));

            function incrementNotificationCount() {
                const badge = $('#notificationCountBadge');
                let current = parseInt(badge.text()) || 0;
                badge.text(current + 1).show();
            }
        });
    </script>
    }
</body>
</html>
